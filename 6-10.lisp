;; Problem 6
(defun euler6 (&optional (i 100) (sum 0) (sq-sum 0))
  (cond
    ((zerop i)
     (- (expt sum 2) sq-sum))
    (t
     (euler6 (1- i) (+ sum i) (+ sq-sum (expt i 2))))))
;(print '===> )(princ (euler6))

;; Problem 7
; (SKIPPED due to annoying primes)

;; Problem 8
(defvar *euler8num* "7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450")

(defun euler8 (&optional (num *euler8num*) (d 13) (i 0) (res 0))
  (let ((product
	 (reduce #'* (loop for c across (subseq num i (+ i d))
			collect (digit-char-p c)))))
    (cond
      ((= i (- (length *euler8num*) d))
       res)
      ((> product res)
       (euler8 *euler8num* d (1+ i) product))
      (t
       (euler8 *euler8num* d (1+ i) res)))))
;(print '===> )(princ (euler8))


;; Problem 9
(defun euler9 ()
  (car
   (loop for a from 1 to 998
      append (loop for b from 1 to (- 999 a)
		append (let ((c (- 1000 a b)))
			 (if (= (* c c)
				(+ (* a a) (* b b)))
			     (list (* a b c))))))))
;(print '===> )(princ (euler9))


;; Problem 10
(defun is-prime (n)
  (cond
    ((= 2 n) t)
    ((= 3 n) t)
    ((evenp n) nil)
    (t ; shouldn't divide by odds below the sqrt
     (loop for i from 3 to (isqrt n) by 2
	never (zerop (mod n i))))))

(defun euler10 (&optional (cap 2000000))
  (reduce #'+
	  (loop for n from 2 to cap
		 when (is-prime n)
		 collect n)))
;(print '===> )(princ (euler10))
